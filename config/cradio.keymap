// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

// Home row mods macro
//define HRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LALT k2  &ht LCTRL k3  &ht LGUI k4
//define HRMR(k1,k2,k3,k4) &ht RGUI k1  &ht RCTRL k2  &ht RALT k3  &ht RSHFT k4

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <30 31 32 33 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29>;
        };

        hml_layer: hml_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HML_LAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <30 31 32 33 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <30 31 32 33 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24>;
        };

        hmr_layer: hmr_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_LAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <30 31 32 33 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        combo_gametime {
            bindings = <&to 4>;
            key-positions = <30 33 14>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp W  &hml LALT L     &hml LCTRL Y    &hml LGUI P     &kp B        &kp SQT     &hmr RGUI F     &hmr RCTRL O    &hmr RALT U     &kp Q
&kp D  &hml_layer 3 R  &hml_layer 2 S  &hml_layer 1 T  &kp G        &kp M       &hmr_layer 1 N  &hmr_layer 2 E  &hmr_layer 3 I  &kp A
&kp Z  &kp X           &kp C           &kp V           &kp K        &kp SLASH   &kp H           &kp COMMA       &kp DOT         &kp J
                                       &kp SPACE       &kp LSHFT    &kp RETURN  &kp BACKSPACE
            >;
        };

        num_and_nav {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2      &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8          &kp NUMBER_9          &kp NUMBER_0
&kp K_MUTE    &kp C_VOL_DN      &kp C_VOL_UP  &trans        &kp ESCAPE      &kp ESCAPE    &kp LEFT      &kp DOWN              &kp UP                &kp RIGHT
&kp K_PREV    &kp K_PLAY_PAUSE  &kp K_NEXT    &trans        &kp TAB         &kp TAB       &trans        &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp PRINTSCREEN
                                              &trans        &kp LEFT_WIN    &trans        &kp DEL
            >;
        };

        sym {
            bindings = <
&trans     &trans         &kp LEFT_BRACE  &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &trans           &trans
&kp COLON  &kp AT         &kp TILDE       &kp BACKSLASH     &kp PLUS                &kp EQUAL              &kp PIPE           &kp GRAVE        &kp EXCLAMATION  &kp SEMICOLON
&trans     &kp AMPERSAND  &kp PERCENT     &kp HASH          &kp UNDERSCORE          &kp MINUS              &kp DOLLAR         &kp CARET        &kp ASTERISK     &trans
                                          &trans            &trans                  &trans                 &trans
            >;
        };

        special {
            bindings = <
&kp F1        &kp F2        &kp F3        &kp F4        &kp F5        &kp F6        &kp F7  &kp F8  &kp F9   &kp F10
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR    &out OUT_TOG  &trans  &trans  &kp F11  &kp F12
&bootloader   &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans   &bootloader
                                          &trans        &trans        &trans        &trans
            >;
        };

        game {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E      &kp R             &kp T   &kp Y  &kp U  &kp I  &kp O
&kp LCTRL  &kp A  &kp S  &kp D      &kp F             &kp G   &kp H  &kp J  &kp K  &kp L
&mo 5      &kp Z  &kp X  &kp C      &kp V             &kp B   &kp N  &kp M  &kp P  &mo 6
                         &kp SPACE  &kp LEFT_SHIFT    &trans  &to 0
            >;
        };

        game_num {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2      &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8          &kp NUMBER_9          &kp NUMBER_0
&kp K_MUTE    &kp C_VOL_DN      &kp C_VOL_UP  &trans        &kp ESCAPE      &kp ESCAPE    &kp LEFT      &kp DOWN              &kp UP                &kp RIGHT
&kp K_PREV    &kp K_PLAY_PAUSE  &kp K_NEXT    &trans        &kp TAB         &kp TAB       &trans        &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp PRINTSCREEN
                                              &trans        &kp LEFT_WIN    &trans        &kp DEL
            >;
        };

        game_func {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                        &trans  &trans    &trans  &trans
            >;
        };
    };
};
