// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

// Home row mods macro
//define HRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LALT k2  &ht LCTRL k3  &ht LGUI k4
//define HRMR(k1,k2,k3,k4) &ht RGUI k1  &ht RCTRL k2  &ht RALT k3  &ht RSHFT k4

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <30 31 32 33 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <30 31 32 33 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        combo_sys_reset {
            bindings = <&sys_reset>;
            key-positions = <26 29 20 23>;
            layers = <3>;
        };

        combo_boot_reset {
            bindings = <&bootloader>;
            key-positions = <20 23 26 29 27 22>;
            layers = <3>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <31 32>;
            layers = <0 1 2 3>;
        };

        combo_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <30 32>;
            layers = <0 1 2 3>;
        };

        combo_screenshot {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <0 1 9>;
            layers = <1 0 2 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp W            &kp L            &kp Y         &kp P         &kp B        &kp SQT        &kp F         &kp O         &kp U             &kp Q
&hml LEFT_GUI D  &hml LEFT_ALT R  &hml LCTRL S  &hml LSHFT T  &kp G        &kp M          &hmr RSHFT N  &hmr RCTRL E  &hmr RIGHT_ALT I  &hmr RIGHT_GUI A
&kp Z            &kp X            &kp C         &kp V         &kp K        &kp SLASH      &kp H         &kp COMMA     &kp DOT           &kp J
                                                &kp ENTER     &kp SPACE    &kp BACKSPACE  &to 1
            >;
        };

        vim_and_nav {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4    &kp NUMBER_5            &kp NUMBER_6           &kp NUMBER_7     &kp NUMBER_8  &kp NUMBER_9      &kp NUMBER_0
&kp LEFT      &kp DOWN      &kp UP_ARROW  &kp RIGHT       &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS  &kp H            &kp J         &kp K             &kp L
&kp K_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &kp LEFT_BRACE  &kp LEFT_BRACKET        &kp RIGHT_BRACKET      &kp RIGHT_BRACE  &kp K_PREV    &kp K_PLAY_PAUSE  &kp K_NEXT
                                          &to 0           &kp ESC                 &kp RIGHT_GUI          &to 2
            >;
        };

        sym {
            bindings = <
&kp F1     &kp F2         &kp F3       &kp F4         &kp F5            &kp F6     &kp F7      &kp F8     &kp F9           &kp F10
&kp COLON  &kp AT         &kp TILDE    &kp BACKSLASH  &kp PLUS          &kp EQUAL  &kp PIPE    &kp GRAVE  &kp EXCLAMATION  &kp SEMICOLON
&kp F11    &kp AMPERSAND  &kp PERCENT  &kp HASH       &kp UNDERSCORE    &kp MINUS  &kp DOLLAR  &kp CARET  &kp ASTERISK     &kp F12
                                       &to 0          &trans            &trans     &to 3
            >;
        };

        special {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_CLR    &out OUT_TOG  &none            &none  &none  &none
&kp LC(Z)     &kp LC(X)     &kp LC(C)      &kp LC(V)      &none         &none         &kp PRINTSCREEN  &none  &none  &none
&none         &none         &kp LS(LC(C))  &kp LS(LC(V))  &none         &none         &none            &none  &none  &none
                                           &to 0          &none         &none         &none
            >;
        };
    };
};
